/**
 */
package REA_EML.REA_EML_BPolM.provider;

import REA_EML.REA_EML_BPolM.util.REA_EML_BPolMAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class REA_EML_BPolMItemProviderAdapterFactory extends REA_EML_BPolMAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public REA_EML_BPolMItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link REA_EML.REA_EML_BPolM.BusinessPolicyModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessPolicyModelItemProvider businessPolicyModelItemProvider;

	/**
	 * This creates an adapter for a {@link REA_EML.REA_EML_BPolM.BusinessPolicyModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessPolicyModelAdapter() {
		if (businessPolicyModelItemProvider == null) {
			businessPolicyModelItemProvider = new BusinessPolicyModelItemProvider(this);
		}

		return businessPolicyModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link REA_EML.REA_EML_BPolM.BusinessEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessEntityItemProvider businessEntityItemProvider;

	/**
	 * This creates an adapter for a {@link REA_EML.REA_EML_BPolM.BusinessEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessEntityAdapter() {
		if (businessEntityItemProvider == null) {
			businessEntityItemProvider = new BusinessEntityItemProvider(this);
		}

		return businessEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link REA_EML.REA_EML_BPolM.BusinessRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessRelationshipItemProvider businessRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link REA_EML.REA_EML_BPolM.BusinessRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessRelationshipAdapter() {
		if (businessRelationshipItemProvider == null) {
			businessRelationshipItemProvider = new BusinessRelationshipItemProvider(this);
		}

		return businessRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link REA_EML.REA_EML_BPolM.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link REA_EML.REA_EML_BPolM.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link REA_EML.REA_EML_BPolM.PolicyEntityType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolicyEntityTypeItemProvider policyEntityTypeItemProvider;

	/**
	 * This creates an adapter for a {@link REA_EML.REA_EML_BPolM.PolicyEntityType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPolicyEntityTypeAdapter() {
		if (policyEntityTypeItemProvider == null) {
			policyEntityTypeItemProvider = new PolicyEntityTypeItemProvider(this);
		}

		return policyEntityTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link REA_EML.REA_EML_BPolM.Typification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypificationItemProvider typificationItemProvider;

	/**
	 * This creates an adapter for a {@link REA_EML.REA_EML_BPolM.Typification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypificationAdapter() {
		if (typificationItemProvider == null) {
			typificationItemProvider = new TypificationItemProvider(this);
		}

		return typificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link REA_EML.REA_EML_BPolM.PolicyEntityGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolicyEntityGroupItemProvider policyEntityGroupItemProvider;

	/**
	 * This creates an adapter for a {@link REA_EML.REA_EML_BPolM.PolicyEntityGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPolicyEntityGroupAdapter() {
		if (policyEntityGroupItemProvider == null) {
			policyEntityGroupItemProvider = new PolicyEntityGroupItemProvider(this);
		}

		return policyEntityGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link REA_EML.REA_EML_BPolM.Grouping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupingItemProvider groupingItemProvider;

	/**
	 * This creates an adapter for a {@link REA_EML.REA_EML_BPolM.Grouping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupingAdapter() {
		if (groupingItemProvider == null) {
			groupingItemProvider = new GroupingItemProvider(this);
		}

		return groupingItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (businessPolicyModelItemProvider != null) businessPolicyModelItemProvider.dispose();
		if (businessEntityItemProvider != null) businessEntityItemProvider.dispose();
		if (businessRelationshipItemProvider != null) businessRelationshipItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (policyEntityTypeItemProvider != null) policyEntityTypeItemProvider.dispose();
		if (typificationItemProvider != null) typificationItemProvider.dispose();
		if (policyEntityGroupItemProvider != null) policyEntityGroupItemProvider.dispose();
		if (groupingItemProvider != null) groupingItemProvider.dispose();
	}

}
