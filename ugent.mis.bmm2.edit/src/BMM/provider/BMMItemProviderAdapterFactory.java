/**
 */
package BMM.provider;

import BMM.util.BMMAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BMMItemProviderAdapterFactory extends BMMAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BMMItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.MotivationElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MotivationElementItemProvider motivationElementItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.MotivationElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMotivationElementAdapter() {
		if (motivationElementItemProvider == null) {
			motivationElementItemProvider = new MotivationElementItemProvider(this);
		}

		return motivationElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.Assessment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssessmentItemProvider assessmentItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.Assessment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssessmentAdapter() {
		if (assessmentItemProvider == null) {
			assessmentItemProvider = new AssessmentItemProvider(this);
		}

		return assessmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.End} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndItemProvider endItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.End}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndAdapter() {
		if (endItemProvider == null) {
			endItemProvider = new EndItemProvider(this);
		}

		return endItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.Influencer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfluencerItemProvider influencerItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.Influencer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfluencerAdapter() {
		if (influencerItemProvider == null) {
			influencerItemProvider = new InfluencerItemProvider(this);
		}

		return influencerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.InfluencingOrganization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfluencingOrganizationItemProvider influencingOrganizationItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.InfluencingOrganization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfluencingOrganizationAdapter() {
		if (influencingOrganizationItemProvider == null) {
			influencingOrganizationItemProvider = new InfluencingOrganizationItemProvider(this);
		}

		return influencingOrganizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.Means} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeansItemProvider meansItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.Means}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeansAdapter() {
		if (meansItemProvider == null) {
			meansItemProvider = new MeansItemProvider(this);
		}

		return meansItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.PotentialImpact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PotentialImpactItemProvider potentialImpactItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.PotentialImpact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPotentialImpactAdapter() {
		if (potentialImpactItemProvider == null) {
			potentialImpactItemProvider = new PotentialImpactItemProvider(this);
		}

		return potentialImpactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.AssessmentCategory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssessmentCategoryItemProvider assessmentCategoryItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.AssessmentCategory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssessmentCategoryAdapter() {
		if (assessmentCategoryItemProvider == null) {
			assessmentCategoryItemProvider = new AssessmentCategoryItemProvider(this);
		}

		return assessmentCategoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.InfluencerCategory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfluencerCategoryItemProvider influencerCategoryItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.InfluencerCategory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfluencerCategoryAdapter() {
		if (influencerCategoryItemProvider == null) {
			influencerCategoryItemProvider = new InfluencerCategoryItemProvider(this);
		}

		return influencerCategoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.OrganizationCategory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrganizationCategoryItemProvider organizationCategoryItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.OrganizationCategory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrganizationCategoryAdapter() {
		if (organizationCategoryItemProvider == null) {
			organizationCategoryItemProvider = new OrganizationCategoryItemProvider(this);
		}

		return organizationCategoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.OrganizationUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrganizationUnitItemProvider organizationUnitItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.OrganizationUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrganizationUnitAdapter() {
		if (organizationUnitItemProvider == null) {
			organizationUnitItemProvider = new OrganizationUnitItemProvider(this);
		}

		return organizationUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.BusinessProcess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessProcessItemProvider businessProcessItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.BusinessProcess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessProcessAdapter() {
		if (businessProcessItemProvider == null) {
			businessProcessItemProvider = new BusinessProcessItemProvider(this);
		}

		return businessProcessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.Asset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssetItemProvider assetItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.Asset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssetAdapter() {
		if (assetItemProvider == null) {
			assetItemProvider = new AssetItemProvider(this);
		}

		return assetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.Liability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiabilityItemProvider liabilityItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.Liability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiabilityAdapter() {
		if (liabilityItemProvider == null) {
			liabilityItemProvider = new LiabilityItemProvider(this);
		}

		return liabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.Resource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceItemProvider resourceItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.Resource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceAdapter() {
		if (resourceItemProvider == null) {
			resourceItemProvider = new ResourceItemProvider(this);
		}

		return resourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.Mission} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MissionItemProvider missionItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.Mission}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMissionAdapter() {
		if (missionItemProvider == null) {
			missionItemProvider = new MissionItemProvider(this);
		}

		return missionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.CourseOfAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CourseOfActionItemProvider courseOfActionItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.CourseOfAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCourseOfActionAdapter() {
		if (courseOfActionItemProvider == null) {
			courseOfActionItemProvider = new CourseOfActionItemProvider(this);
		}

		return courseOfActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.FixedAsset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FixedAssetItemProvider fixedAssetItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.FixedAsset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFixedAssetAdapter() {
		if (fixedAssetItemProvider == null) {
			fixedAssetItemProvider = new FixedAssetItemProvider(this);
		}

		return fixedAssetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.Offering} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OfferingItemProvider offeringItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.Offering}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOfferingAdapter() {
		if (offeringItemProvider == null) {
			offeringItemProvider = new OfferingItemProvider(this);
		}

		return offeringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.Directive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DirectiveItemProvider directiveItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.Directive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDirectiveAdapter() {
		if (directiveItemProvider == null) {
			directiveItemProvider = new DirectiveItemProvider(this);
		}

		return directiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.Strategy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StrategyItemProvider strategyItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.Strategy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStrategyAdapter() {
		if (strategyItemProvider == null) {
			strategyItemProvider = new StrategyItemProvider(this);
		}

		return strategyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.Tactic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TacticItemProvider tacticItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.Tactic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTacticAdapter() {
		if (tacticItemProvider == null) {
			tacticItemProvider = new TacticItemProvider(this);
		}

		return tacticItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.BusinessRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessRuleItemProvider businessRuleItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.BusinessRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessRuleAdapter() {
		if (businessRuleItemProvider == null) {
			businessRuleItemProvider = new BusinessRuleItemProvider(this);
		}

		return businessRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.BusinessPolicy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessPolicyItemProvider businessPolicyItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.BusinessPolicy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessPolicyAdapter() {
		if (businessPolicyItemProvider == null) {
			businessPolicyItemProvider = new BusinessPolicyItemProvider(this);
		}

		return businessPolicyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.Regulation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegulationItemProvider regulationItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.Regulation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegulationAdapter() {
		if (regulationItemProvider == null) {
			regulationItemProvider = new RegulationItemProvider(this);
		}

		return regulationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.Vision} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VisionItemProvider visionItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.Vision}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVisionAdapter() {
		if (visionItemProvider == null) {
			visionItemProvider = new VisionItemProvider(this);
		}

		return visionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.DesiredResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DesiredResultItemProvider desiredResultItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.DesiredResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDesiredResultAdapter() {
		if (desiredResultItemProvider == null) {
			desiredResultItemProvider = new DesiredResultItemProvider(this);
		}

		return desiredResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.Goal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoalItemProvider goalItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.Goal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoalAdapter() {
		if (goalItemProvider == null) {
			goalItemProvider = new GoalItemProvider(this);
		}

		return goalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.Objective} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectiveItemProvider objectiveItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.Objective}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectiveAdapter() {
		if (objectiveItemProvider == null) {
			objectiveItemProvider = new ObjectiveItemProvider(this);
		}

		return objectiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.PotentialReward} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PotentialRewardItemProvider potentialRewardItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.PotentialReward}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPotentialRewardAdapter() {
		if (potentialRewardItemProvider == null) {
			potentialRewardItemProvider = new PotentialRewardItemProvider(this);
		}

		return potentialRewardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.Risk} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RiskItemProvider riskItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.Risk}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRiskAdapter() {
		if (riskItemProvider == null) {
			riskItemProvider = new RiskItemProvider(this);
		}

		return riskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link BMM.BMMmodel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BMMmodelItemProvider bmMmodelItemProvider;

	/**
	 * This creates an adapter for a {@link BMM.BMMmodel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBMMmodelAdapter() {
		if (bmMmodelItemProvider == null) {
			bmMmodelItemProvider = new BMMmodelItemProvider(this);
		}

		return bmMmodelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (motivationElementItemProvider != null) motivationElementItemProvider.dispose();
		if (assessmentItemProvider != null) assessmentItemProvider.dispose();
		if (endItemProvider != null) endItemProvider.dispose();
		if (influencerItemProvider != null) influencerItemProvider.dispose();
		if (influencingOrganizationItemProvider != null) influencingOrganizationItemProvider.dispose();
		if (meansItemProvider != null) meansItemProvider.dispose();
		if (potentialImpactItemProvider != null) potentialImpactItemProvider.dispose();
		if (assessmentCategoryItemProvider != null) assessmentCategoryItemProvider.dispose();
		if (influencerCategoryItemProvider != null) influencerCategoryItemProvider.dispose();
		if (organizationCategoryItemProvider != null) organizationCategoryItemProvider.dispose();
		if (organizationUnitItemProvider != null) organizationUnitItemProvider.dispose();
		if (businessProcessItemProvider != null) businessProcessItemProvider.dispose();
		if (assetItemProvider != null) assetItemProvider.dispose();
		if (liabilityItemProvider != null) liabilityItemProvider.dispose();
		if (resourceItemProvider != null) resourceItemProvider.dispose();
		if (missionItemProvider != null) missionItemProvider.dispose();
		if (courseOfActionItemProvider != null) courseOfActionItemProvider.dispose();
		if (fixedAssetItemProvider != null) fixedAssetItemProvider.dispose();
		if (offeringItemProvider != null) offeringItemProvider.dispose();
		if (directiveItemProvider != null) directiveItemProvider.dispose();
		if (strategyItemProvider != null) strategyItemProvider.dispose();
		if (tacticItemProvider != null) tacticItemProvider.dispose();
		if (businessRuleItemProvider != null) businessRuleItemProvider.dispose();
		if (businessPolicyItemProvider != null) businessPolicyItemProvider.dispose();
		if (regulationItemProvider != null) regulationItemProvider.dispose();
		if (visionItemProvider != null) visionItemProvider.dispose();
		if (desiredResultItemProvider != null) desiredResultItemProvider.dispose();
		if (goalItemProvider != null) goalItemProvider.dispose();
		if (objectiveItemProvider != null) objectiveItemProvider.dispose();
		if (potentialRewardItemProvider != null) potentialRewardItemProvider.dispose();
		if (riskItemProvider != null) riskItemProvider.dispose();
		if (bmMmodelItemProvider != null) bmMmodelItemProvider.dispose();
	}

}
